package com.company.Homework;

public class Homework1 {
    public static void main(String[] args) throws InterruptedException {
        /*В Java существует всего 8 примитивных типов данных.
        * Под каждый тип данных выделяется n-е кол-во байт*/
        byte a; //Выделяется 1 байт. Диапазон значений oт -128 до 127;
        short b; //Выделяется 2 байта. Диапазон от -32768 до 32767;
        int c; // Выделяется 4 байта. Диапазон от -2147483648 до 2147483647
        long d; // Выделяется 8 байт. Диапазон от -9_223_372_036_854_775_808 до 9_223_372_036_854_774_807

        /*Допустим мы хотим присвоить типу long номер банковской карточки состоящей из 16 цифр*/
//        long numberCart = 5168_6524_2329_2526;   // Ошибка. Почему? Потому что по дефолту все типы данных приводятся к int.
                                                 // И если мы наведем курсор то Идея нам говорит что, слишком большое число для int.
        long numberCartL = 5168_6524_2329_2526L; // Поэтому в конце мы указываем литерал L и тогда ошибки не будет

        /*Выше рассмотрены целочисленные типы данных, также есть числа с плавающей точкой, а именно float и double
        * Под float выделяется 4 байта. Диапазон от 3.402_823_47Е + 38F до -3.402_823_47Е + 38F с точностью до 6-7 значащих десятичных цифр*/
//        float f = 3.14;   // Ошибка. Так же как и в целочисленных типах данных, по дефолту числа с плав. точкой приводятся к типу double
        float ff = 3.14F; // Поэтому мы явно указываем литерал F в конце

        /*Тип double точнее чем тип float и под соотвественно него выделяется больше байт, а именно 8 и его диапазон составляет от 1.797_693_134_862_315_70Е + 308
        до -1.797_693_134_862_315_70Е + 308 с точностью до 15 значащих десятичных цифр*/
        double g = 2.5;
        /* Но числа с плавающей точкой не обладают высокой точностью, то есть например для банковских операций данные типы данных не подойдут
        * Для финансовых и банковских операций больше подходит тип данных BigDecimal или BigInteger*/

        /*Тип char используется для хранения символов и не только, мы также можем присвоить переменной типа char значение типа int
        * В java для типа данных char используется кодировка Unicode и выделяется под хранение 2 байта. Диапазон от 0 до 65_536*/
        char symbol = '$'; // Символ
        char number = 78; // Код переменной. Вывод символ N
        char unicode = '\u0029'; // Код Unicode. Вывод символ )

        /* Последний тип данных это booleat, принимает значение true или false.*/
        boolean t = true;
        boolean h = false;

        /*Также в Java можно записывать переменные в разных типах счисления */
        int v = 0b1010111; // В двоичной начинается с 0b или 0B
        int m = 0652152; // В восьмеричной начинается с 0 и допустимые цифры от 0 до 7. То есть если мы напишем 8, то будет ошибка
        int x = 6564645; // Десятичная система, не может начинаться с 0, т.к компилятор приймет его за число в восьмеричной системе
        int z = 0x1562F16; // Шестнадцатеричная система, начинаются с 0х или 0Х, допустимые числа от 0 до 15, где от 10 до 15 буквы А-F соотвественно
        int k = 882; // Также если в Идее нажать Alt + Enter, то компилятор предложит переконвертировать число в одну из систем счисления


        /*Переполнение
        * Все типы данных имееют свой диапазон значений, но это не значит, что если написать как в строке 49, то будет ошибка,
        * Числа пойдут в обратном порядке, можно также продемонстировать работу с помощью цикла*/
        byte p = ((byte)(127 + 5));
        System.out.println("p = " + p);
        for (byte index = 0; index < 255 ; index++) {
            Thread.sleep(300);
            System.out.println("index = " + index);

        }
    }
}
